set nocompatible

if !has('nvim')
    " Set default 'runtimepath' without ~/.vim folders
    let &runtimepath=printf('%s/vimfiles,%s,%s/vimfiles/after', $VIM, $VIMRUNTIME, $VIM)
    " What is the name of the directory containing this file?
    let s:portable=expand('<sfile>:p:h')
    " Add the directory to 'runtimepath'
    let &runtimepath=printf('%s,%s,%s/after', s:portable, &runtimepath, s:portable)
endif

" Enable pathogen and plugins
runtime bundle/pathogen/autoload/pathogen.vim
call pathogen#infect()
call pathogen#helptags()

" Use sensible XDG paths
if has('nvim')
    set viminfo='1000,n$XDG_CACHE_HOME/nvim/info
else
    set viminfo='1000,n$XDG_CACHE_HOME/vim/info
endif
let g:backup_directory=$XDG_DATA_HOME . '/backups'

" Enable modern colors if supported
set background=dark
if has('termguicolors') && $TERM_PROGRAM != "Apple_Terminal" && empty($TMUX)
    set termguicolors
    colorscheme solarized8_dark_flat
else
    let g:solarized_termtrans=1
    let g:solarized_termcolors=256
    let g:solarized_underline=0
    set t_Co=256
    colorscheme solarized
endif

" Enable cursor shape change on insert in neovim
let $NVIM_TUI_ENABLE_CURSOR_SHAPE=1

set filetype=on
set shiftround
set showmatch " show matching brackets when text indicator is over them
set hlsearch " highlight search results
set ignorecase " ignore case when searching
set smartcase " when searching try to be smart about cases
set nowrap
set ttyfast
set lazyredraw
set clipboard=unnamed,unnamedplus
set list listchars=tab:>-,trail:Â·,extends:>,precedes:<
set showmode
set number
set cursorline
set showcmd " show partial commands in bottom left corner
set completeopt-=preview " don't show preview window on competion

" Scrolling
set scrolloff=8 "start scrolling when we're 8 lines away from margins
set sidescrolloff=15
set sidescroll=1

" Folding
set foldmethod=indent
set foldnestmax=10
set nofoldenable
set foldlevel=2
let g:SimpylFold_docstring_preview=1

" Use Space to toggle folding
nnoremap <Space> za
vnoremap <Space> zf

" CtrlP mappings
nnoremap <C-o> :CtrlPCmdPalette<CR>
inoremap <C-o> <ESC>:CtrlPCmdPalette<CR>

" Fn hotkeys
set pastetoggle=<F2>
nnoremap <F2> :set invpaste paste?<CR>
nnoremap <F3> :NumbersToggle<CR>
inoremap <F3> <ESC>:NumbersToggle<CR>
nnoremap <F4> :Dash<CR>
inoremap <F4> <ESC>:Dash<CR>
nnoremap <F5> :Ag<CR>
inoremap <F5> <ESC>:Ag<CR>
nnoremap <F6> :NERDTreeTabsToggle<CR>
inoremap <F6> <ESC>:NERDTreeTabsToggle<CR>
nnoremap <F7> :TagbarToggle<CR>
inoremap <F7> <ESC>:TagbarToggle<CR>

" Alt left/right to switch buffers. Terminal should be configured to send proper escape sequences
if has('nvim')
    nnoremap <A-b> :bprev!<CR>
    inoremap <A-b> <ESC>:bprev!<CR>
    nnoremap <A-f> :bnext!<CR>
    inoremap <A-f> <ESC>:bnext!<CR>
else
    nnoremap <ESC>b :bprev!<CR>
    inoremap <ESC>b <ESC>:bprev!<CR>
    nnoremap <ESC>f :bnext!<CR>
    inoremap <ESC>f <ESC>:bnext!<CR>
endif

" Ctrl arrows to switch between splits and tmux panes
let g:tmux_navigator_no_mappings=1
nnoremap <silent> <C-Left> :TmuxNavigateLeft<CR>
inoremap <silent> <C-Left> <ESC>:TmuxNavigateLeft<CR>
nnoremap <silent> <C-Down> :TmuxNavigateDown<CR>
inoremap <silent> <C-Down> <ESC>:TmuxNavigateDown<CR>
nnoremap <silent> <C-Up> :TmuxNavigateUp<CR>
inoremap <silent> <C-Up> <ESC>:TmuxNavigateUp<CR>
nnoremap <silent> <C-Right> :TmuxNavigateRight<CR>
inoremap <silent> <C-Right> <ESC>:TmuxNavigateRight<CR>
nnoremap <silent> <C-\> :TmuxNavigatePrevious<CR>
inoremap <silent> <C-\> <ESC>:TmuxNavigatePrevious<CR>

" Mappings and configuration for incsearch
map /  <Plug>(incsearch-forward)
map ?  <Plug>(incsearch-backward)
map g/ <Plug>(incsearch-stay)
let g:incsearch#auto_nohlsearch=1
map n  <Plug>(incsearch-nohl-n)
map N  <Plug>(incsearch-nohl-N)
map *  <Plug>(incsearch-nohl-*)
map #  <Plug>(incsearch-nohl-#)
map g* <Plug>(incsearch-nohl-g*)
map g# <Plug>(incsearch-nohl-g#)<Paste>
let g:incsearch#emacs_like_keymap=1

" Mappings and configuration for test.vim
nmap <silent> <leader>t :TestNearest<CR>
nmap <silent> <leader>T :TestFile<CR>
nmap <silent> <leader>a :TestSuite<CR>
nmap <silent> <leader>l :TestLast<CR>
nmap <silent> <leader>g :TestVisit<CR>
let test#strategy="dispatch"

" Mappings for listtoggle
let g:lt_location_list_toggle_map='<leader>f'

" SuperTab completion from top to bottom
let g:SuperTabDefaultCompletionType='context'
let g:SuperTabCrMapping=1
let g:SuperTabLongestEnhanced=1
let g:SuperTabLongestHighlight=1

" Don't conceal quotes in JSON
let g:vim_json_syntax_conceal=0

" Enable color coded parentheses
let g:rainbow_active=1

" Tuning of airline
let g:airline#extensions#tabline#enabled=1
let g:airline_left_sep=''
let g:airline_right_sep=''
let g:airline_left_alt_sep=''
let g:airline_right_alt_sep=''

" Automatic tags creation tuning
let g:easytags_async=1
if has('nvim')
    let g:easytags_file=$XDG_CACHE_HOME . '/nvim/tags'
else
    let g:easytags_file=$XDG_CACHE_HOME . '/vim/tags'
endif
let g:easytags_suppress_ctags_warning=1
let b:easytags_auto_highlight=0
let g:easytags_python_enabled=1

" Markdown tuning
let g:markdown_fenced_languages=['html', 'python', 'bash=sh', 'sh']
let g:vim_markdown_conceal=0

" Don't echo root dir, don't change root automatically
let g:rooter_silent_chdir=1
let g:rooter_manual_only=1

" Allow saving of files as sudo when I forgot to start vim using sudo
cmap w!! %!sudo tee > /dev/null %

" Handle crontab files properly
autocmd filetype crontab setlocal nobackup nowritebackup

" Indicated border column (PEP8)
autocmd filetype python setlocal colorcolumn=80

" source local configuration
runtime vimrc.local
